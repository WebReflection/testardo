#!/usr/bin/env node

/*!
 * Copyright (C) 2014 by Andrea Giammarchi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// @info http://webreflection.blogspot.com/2007/06/simple-settimeout-setinterval-extra.html
/*@cc_on
(function(f){
 window.setTimeout =f(window.setTimeout);
 window.setInterval =f(window.setInterval);
})(function(f){return function(c,t){var a=[].slice.call(arguments,2);return f(function(){c.apply(this,a)},t)}});
@*/

this.$ = function() {'use strict';

// --- INTERNAL USE ONLY ---

/** @description
 * if a test contains an `external` propery as string
 * or as Array of strings, these will be injected in the page
 * before the test will be executed.
 * Handy specially with tests helpers able to deal with the DOM
 * in a simplified way than native API would offer (jQuery or such)
 */

// holds all external libraries so these will be
// downloaded only once
var JSContent = {};

// ask the server to download the source of the library
// throws if the returned status is not in range 200-399
function downloadJSContent(src) {
  var xhr = XHR();
  xhr.open('GET', '/' + encodeURIComponent('<<<' + src), false);
  xhr.send(null);
  if (!/^(?:2|3)\d{2}$/.test(xhr.status)) {
    throw new Error('unable to downlaod src');
  }
  return xhr.responseText;
}

// populate an array of urls with relative content per each url
function grabJSContent(libraries) {
  for(var i = 0, src; i < libraries.length; i++) {
    src = libraries[i];
    libraries[i] = JSContent[src] || (
      JSContent[src] = downloadJSContent(src)
    );
  }
  return libraries;
}

// --- INTERNAL USE ONLY ---

var
  global = this,
  COMMON_DELAY = 100,
  // use native selector or not ?
  NATIVE_SELECTOR = !!global.document.querySelectorAll,
  // try to understand the current page width
  WIDTH = (
    global.innerWidth ||
    document.documentElement.offsetWidth ||
    document.body.offsetWidth
  ),
  // the main iframe where tests will run
  iframe = global.document.getElementsByTagName('iframe')[0],
  // the internal shared in scope window and document reference
  window = grabWindow(),
  document = window.document,
  // the method to query
  // eventually fixed if no NATIVE_SELECTOR is available
  queryAll
;

// returns a usable XMLHttpRequest for old browsers too
function XHR() {
  return global.XMLHttpRequest ?
    new XMLHttpRequest() :
    new ActiveXObject('Microsoft.XMLHTTP');
}

// re-set the iframe onload callback
function addIframeOnLoad(callback) {
  // if a callback is specified ...
  iframe.onload = callback ?
    function () {
      // update all references first
      onload();
      // then invoke the test after a little while
      setTimeout(
        createCallbackWrap(callback), COMMON_DELAY,
        sandbox, window, document
      );
    } :
    // otherwise it just update references
    onload
  ;
}

// shortcut to add error listener/handler in both old browsers and modern
function addListener(where, which, what, lvl0) {
  if ('addEventListener' in where) {
    where.addEventListener(which, what, true);
  } else {
    where.attachEvent('on' + where, which);
  }
  if (lvl0) {
    where['on' + which] = lvl0;
  }
}

// simplifies the creation of a generic event
function createEvent(type) {
  var e;
  if (document.createEvent) {
    e = document.createEvent('Event');
    e.initEvent(type, true, true);
  } else {
    e = document.createEventObject();
    e._type = type;
  }
  return e;
}

// every callback should be wrapped in a try/catch
// specially for very old devices (webOS, Android 2.3)
// where global error won't be triggered
function createCallbackWrap(callback) {
  return function(sandbox, window, document) {
    try {
      callback(sandbox, window, document);
    } catch(o_O) {
      error(o_O);
    }
  };
}

// simplifies an event dispatch
function dispatch(node, evt) {
  if ('dispatchEvent' in node) {
    node.dispatchEvent(evt);
  } else {
    var type = evt._type;
    delete evt._type;
    // simple fix for old browsers
    evt.preventDefault = preventDefault;
    evt.stopPropagation = stopPropagation;
    node.fireEvent(type, evt);
  }
  return evt;
}

// what to do when an error occurres
function error(e) {
  var message = e.message || 'ERROR';
  removeListener(window, 'error', error, onerror);
  removeListener(global, 'error', error, onerror);
  showResult(message);
  sandbox.error(message + (
    e.stack ? '\n' + e.stack : ''
  ));
}

// simplifies node retrievement
function getNode(nodeOrQuery) {
  return typeof nodeOrQuery == 'string' ?
    document.querySelector(nodeOrQuery) :
    nodeOrQuery;
}

// it shoukld return the right window
function grabWindow() {
  return global.frames ? frames[0] : iframe.contentWindow;
}

// used as DOM Level 0 fallback for errors
function onerror(message, lineno, filename) {
  // delegates to error with a better structure
  error({
    message: message,
    stack: filename + ':' + lineno
  });
}

// returns true if the server stopped
function online() {
  var xhr;
  try {
    xhr = XHR();
    xhr.open('HEAD', '/$?' + [+new Date, Math.random()].join(''), false);
    xhr.send(null);
  } catch(e) {
    xhr = {};
  }
  return xhr.status == 200 || !!showResult('offline');
}

// every time a test or a new page is loaded
function onload() {
  if (online()) {
    // prepare the frame to catch wild refresh or operations
    iframe.onload = onUncaughtLoad;
    // update all scope shared references (window, document)
    updateReferences();
  } else {
    reloadIfItIsOnline();
  }
}

// invoked in the wild when uncougt reload occurres
function onUncaughtLoad() {
  if (online()) {
    // if there was already an onload
    var onload = sandbox.onload;
    // store and drop it
    sandbox.onload = null;
    // most important part
    updateReferences();
    if (onload) {
      // invoke it later on
      setTimeout(function () {
        onload.call(sandbox, sandbox, window, document);
      }, COMMON_DELAY);
    }
  } else {
    reloadIfItIsOnline();
  }
}

// simulate the Event#preventDefault method in old browser
function preventDefault() {
  this.returnValue = false;
  this.defaultPrevented = true;
}

// restart the test if online at TIMEOUT time
function reloadIfItIsOnline() {
  // run again the test one more time
  // after TIMEOUT milliseconds
  return setTimeout(function reload(){
    if (online()) {
      global.location.reload();
    } else {
      setTimeout(reload, TIMEOUT);
    }
  }, TIMEOUT);
}

// shortcut to remove error listener/handler in both old browsers and modern
function removeListener(where, which, what, lvl0) {
  if ('removeEventListener' in where) {
    where.removeEventListener(which, what, true);
  } else {
    where.detachEvent('on' + where, which);
  }
  if (lvl0) {
    where['on' + which] = null;
  }
}

// show a big green or red page accordingly with tests result
function showResult(text) {
  var
    innerHTML = '<center><b>' + text + '</b></center>',
    html
  ;
  try {
    (html = global.document.documentElement).innerHTML = innerHTML;
  } catch(probablyIE9Mobile) {
    (html = document.body).innerHTML = innerHTML;
  }
  html.style.background = text == 'OK' ? '#0F0' : (
    text === 'offline' ? '#FF0' : '#F00'
  );
}

// simulate the Event#stopPropagation method in old browser
function stopPropagation() {
  this.cancelBubble = true;
}

// update all shared variables in this scope
function updateReferences() {
  var html, context;
  // the new window
  sandbox.window = window = grabWindow();
  // the new document
  sandbox.document = document = window.document;
  // necessary to avoid problems with non respected
  // viewport size inside the iframe
  html = document.documentElement;
  if (!html.style.width) {
    html.style.width = WIDTH + 'px';
  }
  // necessary for very old browsers where QSA is not present
  if (!NATIVE_SELECTOR) {
    (function(){
      /*!
        * @preserve Qwery - A Blazing Fast query selector engine
        * https://github.com/ded/qwery
        * copyright Dustin Diaz 2012
        * MIT License
        */
      (function(e,t,n){typeof module!="undefined"&&module.exports?module.exports=n():typeof define=="function"&&define.amd?define(n):t[e]=n()})("qwery",this,function(){function L(){this.c={}}function D(e){return A.g(e)||A.s(e,"(^|\\s+)"+e+"(\\s+|$)",1)}function P(e,t){var n=0,r=e.length;for(;n<r;n++)t(e[n])}function H(e){for(var t=[],n=0,r=e.length;n<r;++n)$(e[n])?t=t.concat(e[n]):t[t.length]=e[n];return t}function B(e){var t=0,n=e.length,r=[];for(;t<n;t++)r[t]=e[t];return r}function j(e){while(e=e.previousSibling)if(e[u]==1)break;return e}function F(e){return e.match(C)}function I(e,t,n,r,i,s,a,c,h,p,d){var v,m,g,y,b;if(this[u]!==1)return!1;if(t&&t!=="*"&&this[o]&&this[o].toLowerCase()!==t)return!1;if(n&&(m=n.match(f))&&m[1]!==this.id)return!1;if(n&&(b=n.match(l)))for(v=b.length;v--;)if(!D(b[v].slice(1)).test(this.className))return!1;if(h&&Q.pseudos[h]&&!Q.pseudos[h](this,d))return!1;if(r&&!a){y=this.attributes;for(g in y)if(Object.prototype.hasOwnProperty.call(y,g)&&(y[g].name||g)==i)return this}return r&&!R(s,Z(this,i)||"",a)?!1:this}function q(e){return O.g(e)||O.s(e,e.replace(b,"\\$1"))}function R(e,t,n){switch(e){case"=":return t==n;case"^=":return t.match(M.g("^="+n)||M.s("^="+n,"^"+q(n),1));case"$=":return t.match(M.g("$="+n)||M.s("$="+n,q(n)+"$",1));case"*=":return t.match(M.g(n)||M.s(n,q(n),1));case"~=":return t.match(M.g("~="+n)||M.s("~="+n,"(?:^|\\s+)"+q(n)+"(?:\\s+|$)",1));case"|=":return t.match(M.g("|="+n)||M.s("|="+n,"^"+q(n)+"(-|$)",1))}return 0}function U(e,t){var n=[],i=[],s,a,f,l,h,p,d,v,m=t,g=_.g(e)||_.s(e,e.split(N)),y=e.match(T);if(!g.length)return n;l=(g=g.slice(0)).pop(),g.length&&(f=g[g.length-1].match(c))&&(m=K(t,f[1]));if(!m)return n;d=F(l),p=m!==t&&m[u]!==9&&y&&/^[+~]$/.test(y[y.length-1])?function(e){while(m=m.nextSibling)m[u]==1&&(d[1]?d[1]==m[o].toLowerCase():1)&&(e[e.length]=m);return e}([]):m[r](d[1]||"*");for(s=0,a=p.length;s<a;s++)if(v=I.apply(p[s],d))n[n.length]=v;return g.length?(P(n,function(e){W(e,g,y)&&(i[i.length]=e)}),i):n}function z(e,t,n){if(X(t))return e==t;if($(t))return!!~H(t).indexOf(e);var r=t.split(","),i,s;while(t=r.pop()){i=_.g(t)||_.s(t,t.split(N)),s=t.match(T),i=i.slice(0);if(I.apply(e,F(i.pop()))&&(!i.length||W(e,i,s,n)))return!0}return!1}function W(e,t,n,r){function s(e,r,o){while(o=k[n[r]](o,e))if(X(o)&&I.apply(o,F(t[r]))){if(!r)return o;if(i=s(o,r-1,o))return i}}var i;return(i=s(e,t.length-1,e))&&(!r||Y(i,r))}function X(e,t){return e&&typeof e=="object"&&(t=e[u])&&(t==1||t==9)}function V(e){var t=[],n,r;e:for(n=0;n<e.length;++n){for(r=0;r<t.length;++r)if(t[r]==e[n])continue e;t[t.length]=e[n]}return t}function $(e){return typeof e=="object"&&isFinite(e.length)}function J(t){return t?typeof t=="string"?Q(t)[0]:!t[u]&&$(t)?t[0]:t:e}function K(e,t,n){return e[u]===9?e.getElementById(t):e.ownerDocument&&((n=e.ownerDocument.getElementById(t))&&Y(n,e)&&n||!Y(e,e.ownerDocument)&&a('[id="'+t+'"]',e)[0])}function Q(e,t){var i,s,o=J(t);if(!o||!e)return[];if(e===window||X(e))return!t||e!==window&&X(o)&&Y(e,o)?[e]:[];if(e&&$(e))return H(e);if(i=e.match(x)){if(i[1])return(s=K(o,i[1]))?[s]:[];if(i[2])return B(o[r](i[2]));if(et&&i[3])return B(o[n](i[3]))}return a(e,o)}function G(e,t){return function(n){var r,i;if(v.test(n)){e[u]!==9&&((i=r=e.getAttribute("id"))||e.setAttribute("id",i="__qwerymeupscotty"),n='[id="'+i+'"]'+n,t(e.parentNode||e,n,!0),r||e.removeAttribute("id"));return}n.length&&t(e,n,!1)}}var e=document,t=e.documentElement,n="getElementsByClassName",r="getElementsByTagName",i="querySelectorAll",s="useNativeQSA",o="tagName",u="nodeType",a,f=/#([\w\-]+)/,l=/\.[\w\-]+/g,c=/^#([\w\-]+)$/,h=/^\.([\w\-]+)$/,p=/^([\w\-]+)$/,d=/^([\w]+)?\.([\w\-]+)$/,v=/(^|,)\s*[>~+]/,m=/^\s+|\s*([,\s\+\~>]|$)\s*/g,g=/[\s\>\+\~]/,y=/(?![\s\w\-\/\?\&\=\:\.\(\)\!,@#%<>\{\}\$\*\^'"]*\]|[\s\w\+\-]*\))/,b=/([.*+?\^=!:${}()|\[\]\/\\])/g,w=/^(\*|[a-z0-9]+)?(?:([\.\#]+[\w\-\.#]+)?)/,E=/\[([\w\-]+)(?:([\|\^\$\*\~]?\=)['"]?([ \w\-\/\?\&\=\:\.\(\)\!,@#%<>\{\}\$\*\^]+)["']?)?\]/,S=/:([\w\-]+)(\(['"]?([^()]+)['"]?\))?/,x=new RegExp(c.source+"|"+p.source+"|"+h.source),T=new RegExp("("+g.source+")"+y.source,"g"),N=new RegExp(g.source+y.source),C=new RegExp(w.source+"("+E.source+")?"+"("+S.source+")?"),k={" ":function(e){return e&&e!==t&&e.parentNode},">":function(e,t){return e&&e.parentNode==t.parentNode&&e.parentNode},"~":function(e){return e&&e.previousSibling},"+":function(e,t,n,r){return e?(n=j(e))&&(r=j(t))&&n==r&&n:!1}};L.prototype={g:function(e){return this.c[e]||undefined},s:function(e,t,n){return t=n?new RegExp(t):t,this.c[e]=t}};var A=new L,O=new L,M=new L,_=new L,Y="compareDocumentPosition"in t?function(e,t){return(t.compareDocumentPosition(e)&16)==16}:"contains"in t?function(e,n){return n=n[u]===9||n==window?t:n,n!==e&&n.contains(e)}:function(e,t){while(e=e.parentNode)if(e===t)return 1;return 0},Z=function(){var t=e.createElement("p");return(t.innerHTML='<a href="#x">x</a>')&&t.firstChild.getAttribute("href")!="#x"?function(e,t){return t==="class"?e.className:t==="href"||t==="src"?e.getAttribute(t,2):e.getAttribute(t)}:function(e,t){return e.getAttribute(t)}}(),et=!!e[n],tt=e.querySelector&&e[i],nt=function(e,t){var n=[],r,s;try{return t[u]===9||!v.test(e)?B(t[i](e)):(P(r=e.split(","),G(t,function(e,t){s=e[i](t),s.length==1?n[n.length]=s.item(0):s.length&&(n=n.concat(B(s)))})),r.length>1&&n.length>1?V(n):n)}catch(o){}return rt(e,t)},rt=function(e,t){var n=[],i,s,o,a,f,l;e=e.replace(m,"$1");if(s=e.match(d)){f=D(s[2]),i=t[r](s[1]||"*");for(o=0,a=i.length;o<a;o++)f.test(i[o].className)&&(n[n.length]=i[o]);return n}return P(l=e.split(","),G(t,function(e,r,i){f=U(r,e);for(o=0,a=f.length;o<a;o++)if(e[u]===9||i||Y(f[o],t))n[n.length]=f[o]})),l.length>1&&n.length>1?V(n):n},it=function(e){typeof e[s]!="undefined"&&(a=e[s]?tt?nt:rt:rt)};return it({useNativeQSA:!0}),Q.configure=it,Q.uniq=V,Q.is=z,Q.pseudos={},Q})
    }.call(context = {}));
    queryAll = context.qwery;
  }
  addListener(window, 'error', error, onerror);
}

// set listeners
addListener(global, 'error', error, onerror);

// make iframe full screen
iframe.setAttribute('width', iframe.width = WIDTH);
iframe.style.width = WIDTH + 'px';

// --- PUBLIC / EXPOSED sandbox API ---

/** @description
 * The sandbox object is the main test-suite controller.
 * Most common operations such querying, writing in a field,
 * triggering or creating an event and dispatch it,
 * can be performed through this utility, as well as loading
 * eventually new paths/pages within the current test.
 * However, every test comes with the iframe window and
 * document too, feel free to use this when/if necessary.
 */

var
  sandbox = {
    // a very simple assertion shortcut
    // sb.assert(condition, 'one', 'or more messages');
    assert: function assert(condition) {
      if (!condition) {
        throw new Error(
          // show the message
          [].slice.call(arguments, 1).join(' ') ||
          // or the caller that failed
          ('' + assert.caller)
        );
      }
      return condition;
    },
    // simplifies getting/setting cookies
    // sb.cookie(key)           // get the value
    //
    // sb.cookie(key, value)    // set the value
    //
    // sb.cookie(key, value, {  // set value with extra info
    //  expires: int
    //  path: string
    // })
    cookie: function (key, value, expires) {
      var cookie = document.cookie,
          reset = value == null,
          params = typeof expires === 'object' ?
            expires : {expires: expires},
          i, length;
      key = escape('' + key);
      if (arguments.length === 1) {
        i = cookie.indexOf(key + '=');
        if (-1 < i) {
          i += 1 + key.length;
          length = cookie.indexOf(';', i);
          if (length < 0) {
            length = cookie.length;
          }
          return unescape(
            cookie.substring(i, length)
          );
        }
      } else {
        document.cookie = [
          key + '=' + (reset ? '' : escape('' + value)),
          'expires=' + (
            new Date(
              reset ? 0 : (+new Date) + (params.expires || 1) * 86400000
            )
          ).toUTCString(),
          'path=' + (params.path || '/')
        ].join('; ');
      }
    },
    // simplifies event dispatch
    // accepts a string as selector or directly a node
    // sb.dispatch(cssSelectorOrDOMNode, type[, extendEventViaSuchObject]);
    dispatch: function (nodeOrQuery, typeOrEvent, eventOptions) {
      return dispatch(
        getNode(nodeOrQuery),
        typeof typeOrEvent == 'string' ?
          sandbox.event(typeOrEvent, eventOptions || {}) :
          typeOrEvent
      );
    },
    // attached for convenience to the sandbox
    // makes easier to retrieve them via `this`
    // when/if necessary
    // note:  both window and document will be swapped
    //        once the iframe changes page
    window: window,
    document: document,
    // simplifies event creation for old browsers too
    // accepts optional object used to extend the created event
    // sb.event(type[, extendEventViaSuchObject]);
    event: function (type, options) {
      var e = createEvent(type);
      if (options) {
        e.detail = options;
        for(var key in options) {
          if (options.hasOwnProperty(key)) {
            try {
              e[key] = options[key];
            } catch(o_O) {}
          }
        }
      }
      return e;
    },
    // load another path and invoke a callback, if specified
    // sb.load('/another/path?whatever'[, callback]);
    // it is possible to not specify the callback and use instead
    // sb.load('/newPath').then(callback);
    load: function (href, callback) {
      if (!/^about:/.test(href)) {
        var xhr = XHR();
        xhr.open('HEAD', href, false);
        xhr.send(null);
        sandbox.status = xhr.status;
      }
      addIframeOnLoad(callback);
      window.location.href = href;
      lastAction = 'load';
      return sandbox;
    },
    // load a page from another host/domain
    // use carefully, not everything canb be loaded as expected
    loadFromDifferentDomain: function(href, callback) {
      sandbox.status = 0;
      addIframeOnLoad(callback);
      window.location.href = '/' + encodeURIComponent('<<<' + href);
      lastAction = 'load';
      return sandbox;
    },
    // exposes some useful info about the navigator
    navigator: {
      // the device kind (iPad, iPod, iPhone, Silk, Android, IEMobile)
      kind: /\b(Silk|Asha|IEMobile|iP(?:ad|od|hone)|Android)\b/.test(navigator.userAgent) ? RegExp.$1 : 'unknown',
      // the OS version
      // https://gist.github.com/WebReflection/7107617#file-navigator-version-js
      version: /(?:(?:OS(?: X)?|Android|Windows(?: NT)) |(?:IEMobile|Version|webOS|Nokia\w+)\/)(\d+)[_.](\d+)(?:[_.](\d+(?:\.\d+)?))?/.test(navigator.userAgent) ?
        {
          major: RegExp.$1,
          minor: RegExp.$2 || '0',
          revision: (RegExp.$3 || '0').replace(/^0\./, ''),
          valueOf: function () {
            return this.major;
          }
        } :
        {}
    },
    // simplifies removeEventListener/detachEvent operation
    // note: it does not fix all edge cases, use external libraries for this
    off: function (nodeOrQuery, type, callback) {
      removeListener(getNode(nodeOrQuery), type, callback);
    },
    // simplifies addEventListener/attachEvent operation
    // note: it does not fix all edge cases, use external libraries for this
    on: function (nodeOrQuery, type, callback) {
      addListener(getNode(nodeOrQuery), type, callback);
    },
    // returns first found element or undefined
    // sb.query("div.cname", optionalParentNode);
    query: function (css, parent) {
      return sandbox.queryAll(css, parent)[0];
    },
    // returns all found elements
    // same signature as sb.query(css[, parent])
    queryAll: NATIVE_SELECTOR ?
      function (css, parent) {
        return (parent || document).querySelectorAll(css);
      } :
      function (css, parent) {
        return queryAll(css, parent);
      }
    ,
    // both sb.load(path) and sb.loadFromDifferentDomain(url)
    // returns the sandbox and if a .then(callback) is used
    // this will be invoked once the iframe has been loaded
    // In case of sb.write() this can be used in a similar way.
    then: function (callback) {
      switch(lastAction) {
        case 'load':
          addIframeOnLoad(callback);
          break;
        case 'write':
          lastCallback = callback;
          break;
      }
    },
    // simulates a user writing in a specific field
    // triggering syntethic keyboard events too
    // this operation will be asynchronous
    // sb.write(cssSelectorOrDOMNode, text, callback);
    // or
    // sb.write(cssSelectorOrDOMNode, text).then(callback);
    write: function (nodeOrQuery, text, callback) {
      for(var
        goOnIfNotPrevented = function (type, options) {
          if (!evt.defaultPrevented) {
            evt = sandbox.dispatch(node, type, options);
          }
        },
        put = function(i) {
          var
            c = chars[i],
            code = c.charCodeAt(0),
            options = {
              charCode: code,
              keyCode: code,
              which: code,
              'char': c,
              key: c
            }
          ;
          goOnIfNotPrevented('keydown', options);
          goOnIfNotPrevented('keypress', options);
          goOnIfNotPrevented('keyup', options);
          if (!evt.defaultPrevented && node.value.length === i) {
            node.value += c;
          }
          if (i === chars.length - 1) {
            setTimeout(
              createCallbackWrap(callback || lastCallback),
              COMMON_DELAY * 3, sandbox, window, document
            );
          }
          evt = {};
        },
        evt = {},
        node = getNode(nodeOrQuery),
        chars = text.split(''),
        i = 0; i < chars.length; i++
      ) {
        setTimeout(put, i * COMMON_DELAY, i);
      }
      lastAction = 'write';
      return sandbox;
    }
  },
  // last performed action
  lastAction = '',
  // last invoked callback
  lastCallback = null
;

// --- INTERNAL USE ONLY ---

var
  // all errors that could occurre per each session
  errors = [],
  // last test file name
  lastFile = '',
  // timer
  timer = 0,
  // save timeout, loop, and tests since window.$ will be removed
  TIMEOUT = $.timeout,
  LOOP = $.loop,
  tests = $.tests
;

// remove traces of this function in the global scope
delete global.$;
// also drop the previously set onload
global.onload = global.$;

setTimeout(function test() {
  // keeps running tests if possible
  // then keep testing 'till the end
  function error(message) {
    errors.push(message);
    tests = [];
    test();
  }
  var // one test per time
    file = tests.shift(),
    // used to notify failures or success
    xhr = XHR(),
    // the temporary test module and its export
    module,
    // the temporary list of dependencies
    libraries
  ;
  // if there was a timer going, drop it
  clearTimeout(timer);
  timer = 0;
  // still tests to run ...
  if (file) {
    // store last file name
    lastFile = file.name;
    // set main sandbox actions through the local scope
    sandbox.error = error;
    sandbox.done = test;
    try {
      // grab the test
      module = {};
      // simulate module load
      Function('window,module', file.content).call(window, window, module);
      // fix the exports if just a function
      if (typeof module.exports === 'function') {
        module.exports = {
          test: module.exports
        };
      }
      // grab external libraries if specified
      if (module.exports.external) {
        libraries = grabJSContent([].concat(module.exports.external));
      }
      // load the path or the root of the project
      sandbox.load(module.exports.path || '/', function () {
        // then ... if there were libraries
        if (libraries) {
          // inject them
          var
            html = document.documentElement,
            script = document.createElement('script'),
            text = libraries.join('\n')
          ;
          script.type = 'text/javascript';
          if ('text' in script) {
            script.text = text;
          } else {
            script.appendChild(document.createTextNode(text));
          }
          html.insertBefore(script, html.lastChild);
          // and drop them to not compromise too much the real page
          html.removeChild(script);
        }
        // setup the timeout using the specified one in the test or the global
        timer = setTimeout(onerror, module.exports.timeout || TIMEOUT, 'Expired', '?', lastFile);
        createCallbackWrap(module.exports.test).apply(module.exports, arguments);
      });
    } catch(o_O) {
      // if something went wrong, store the message/error
      error(o_O.message);
    }
  } else {
    // if necessary ... no matter if it was error or not ...
    if (LOOP) {
      reloadIfItIsOnline();
    }
    if(errors.length && online()) {
      // no more tests but there was one or more errors
      // send all known info to the server
      // TODO:  improve this part either exiting at first error
      //        or directly storing all known info per each error
      xhr.open('GET', '!' + escape(
        JSON.stringify(
          [
            '[file] ' + lastFile,
            '[user] ' + navigator.userAgent
          ].concat(errors)
        )
      ), false);
      xhr.send(null);
    } else {
      // show the green status
      showResult('OK');
      // everything OK, tell the server, if presemt, we are good
      if (online()) {
        xhr.open('GET', '*' + new Date * 1, false);
        xhr.send(null);
      }
    }
  }
}, COMMON_DELAY);

};

///*server

// all necessary to parse command arguments before any execution
var // dependencies
  fs = require('fs'),
  path = require('path'),
  // the list of tests to run
  tests = [],
  // utility to retrieve a test file content
  grabTest = function (name) {
    return fs.readFileSync(name, 'utf-8').toString();
  },
  // add test info to the tests list
  // it also watches test files and update
  // the content when these changes
  addTest = function (name) {
    fs.watch(name, function(event) {
      if (event == 'change') {
        tests[this].content = grabTest(name);
      }
    }.bind(tests.push({
      name: name,
      content: grabTest(name)
    }) - 1));
  }
;

// per each program extra argument ...
process.argv.slice(2).forEach(function(arg){
  // set the environment option, if present
  if (this.re.test(arg)) {
    // fake constant like bash exported variables
    process.env[
      RegExp.$1.toUpperCase().replace(this.dash, '_')
    ] = RegExp.$3 || 1;
    // if --anyarg has no value it will be truthy by default
    // i.e. ./testardo --loop proj/test.js
  }
  // or grab the file content or any js test in the folder
  else {
    var stats = fs.statSync(arg);
    if (stats.isFile()) {
      addTest(arg);
    } else if(stats.isDirectory(arg)) {
      fs.readdirSync(arg).filter(this.filter).forEach(this.addTest, arg);
    }
  }
}, {
  dash: /-/g,
  re: /--([^=]+?)(=([^\x00]+))?$/,
  // used to filter valid tests ... right now .js files only
  filter: function (name) {
    return name.slice(-3) === '.js';
  },
  // used to add test content and info
  addTest: function (name) {
    addTest(path.join(this.toString(), name));
  }
});

// basic info about testardo executable and modules
// it shows and exits if no test has been specified
if (!tests.length) {
  console.log([
    '',
    ' [1] program launch',
    '',
    ' testardo [options] test.js',
    ' testardo [options] dir',
    ' testardo [options] test1.js dir2 test3.js',
    '',
    '   --ip=0.0.0.0      the ip address to use. by default reachable through the network',
    '   --port=7357       which port should be used to run tests. i.e. http://0.0.0.0:7357/',
    '   --host=localhost  the host name. it could be a remote address too',
    '   --mirror=80       the port to mirror in the host. The usual/default webserver port',
    '   --timeout=30000   global test timeout in milliseconds',
    '   --email=me@you.us if specified, sends an email with errors/fixes notifications',
    '   --loop=1          if 0 or false, it exists after first execution',
    '   --show-success=0  if 1 or true, it shows all successful attempts',
    '',
    '',
    ' [2] test content',
    '',
    ' module.exports = {',
    '   timeout: 0        optional test timeout, overrides the global one if specified',
    '   external: []      optional external script to inject before the test is executed',
    '   path: "/"         optional path to start with the current test',
    '   test: callback    the test to run. The callback will receive the following arguments:',
    '     - sandbox       the main test utility',
    '     - window        the window of the test page',
    '     - document      a shortcut to window.document',
    ' };',
    '',
    ' module.exports = callback;',
    '   - is an simplified way to write a test with no libraries on root path',
    ''
  ].join(require('os').EOL || '\n'));
  process.exit(0);
}

var // dependencies
  http = require('http'),
  fs = require('fs'),
  os = require('os'),
  path = require('path'),
  url = require('url'),
  // end of line
  EOL = os.EOL || '\n',
  // which IP for the current server + proxy ?
  IP = process.env.IP || '0.0.0.0',
  // which port is for testardo ?
  PORT = process.env.PORT || 7357,
  // which host/domain name ?
  HOST = process.env.HOST || 'localhost',
  // which server port to mirror/proxy via testardo ?
  MIRROR = process.env.MIRROR || 80,
  // how long before each test should timeout ?
  // note:  if specified inside the test as timeout property
  //        that value will be used instead
  TIMEOUT = Math.max(0, parseInt(process.env.TIMEOUT || 0, 10)) || 30000,
  // should it loop forever or not ?
  DONT_LOOP = /^false|0$/.test(process.env.LOOP || 1),
  SHOW_SUCCESS = /^true|1$/.test(process.env['SHOW_SUCCESS']),
  // who should be notified in case of failure ?
  // note:  this might affect DONT_LOOP too in order to avoid
  //        multiple/reduntant emails for the same error and the same failure
  EMAIL = process.env.EMAIL || '',
  // internal shortcut
  FULL_HOST = HOST + ':' + MIRROR,
  // recycled options object per each proxy request
  options = {
    host: HOST,
    port: MIRROR,
    path: '',
    headers: null
  },
  // recycled headers for entry page
  html = {"Content-Type": "text/html"},

  // recycled headers for local libraries
  js = {"Content-Type": "application/javascript"},

  // all UA that failed the test
  failures = Object.create(null),

  // what to do once loaded
  onload = function(response) {
    // simplify browser and tests life via cross frame access
    response.headers['x-frame-options'] = 'ALLOWALL';
    response.headers['x-xss-protection'] = 0;
    // send same status and headers
    this.response.writeHead(response.statusCode, response.headers);
    // pipe the whole response to the current one
    response.pipe(this.response);
  },

  onerror = function () {
    if (!favicon.test(this.path)) {
      process.stderr.write(this.path);
      console.log(EOL);
    }
  },

  // --- SPECIAL OPERATIONS ---

  // entry point, the root of the project
  // i.e. http://0.0.0.0:7357/$
  //      will show the main test page
  main = /^\/\$/,
  // occurred errors, handled behind the scene
  error = /^\/\!/,
  // everything fine, handled behind the scene
  allgood = /^\/\*/,
  // external url, used for libraries and exeternal domains
  // note:  right now it will fail with https requests
  // TODO:  it should probably not
  external = /^\/%3C%3C%3C/,
  externalURI = /^https?:\/\//,
  // strip out beginning of this same file and server related stuff
  // this is used to write inline testardo client to the browser
  fn = /^#[^\n\r]+|\/\*(server)[^\x00]*?\1\*\//g,
  // by default browsers want this file
  favicon = /^\/favicon\.ico/
;

// simply send an empty page and exit the process if necessary
function emptyPage(response, exit) {
  response.writeHead(200, html);
  response.end('');
  if (exit) {
    process.nextTick(process.exit.bind(process, 0));
  }
}

// sends an email with error or FIXED! info
function sendEmail(body) {
  // note: be sure mail is configured properly
  // send an email with all possible infos
  var mail = require('child_process').spawn('mail', [
    '-s',
    '[testardo] ' + FULL_HOST,
    EMAIL
  ], {
    cwd: process.cwd(),
    env: process.env,
    detached: true,
    stdio: [
      'pipe', 'pipe', 'pipe'
    ]
  });
  // what to do once the email has been sent
  mail.on('close', function(code) {
    // show something in the console
    if (code) {
      console.log('[WARNING] unable to send email via ' + EMAIL);
    } else if (SHOW_SUCCESS) {
      console.log('notification sent to ' + EMAIL);
    }
    // in case it should not loop ...
    if (DONT_LOOP) {
      // ... simply exit
      process.exit(1);
    }
  });
  // detach this process ...
  mail.unref();
  // ... and write the content
  mail.stdin.write(
    body, null, mail.stdin.end.bind(mail.stdin)
  );
}

// the server callback, invoked per each request
function server(req, response){
  var UA = req.headers['user-agent'],
      body, mail;
  // root page will create the `testardo` environment for the client browser
  if (main.test(req.url)) {
    response.writeHead(200, html);
    response.end(req.method == 'HEAD' ? '' : '<!DOCTYPE html>'.concat(
      '<title>testardo@', FULL_HOST, '</title>',
      '<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0">',
      '<style>*{zoom:1;border:0;margin:0;padding:0;width:100%;height:100%;font-size:0;line-height:0;}</style>',
      '<iframe src="about:blank"></iframe>',
      // it includes `testardo` itself to offer a zero-config solution
      '<script>', fs.readFileSync(__filename, 'utf-8').toString().replace(fn, ''), EOL,
        // pre fetch all tests for the browser
        '$.tests=', JSON.stringify(tests), ';', EOL,
        // specify the global timeout
        '$.timeout=', TIMEOUT, ';', EOL,
        // specify if it should loop forever
        '$.loop=', !DONT_LOOP, ';', EOL,
        // initialize testardo on the client side
        'this.onload=$;',
      '</script>'
    ));
  } else if(error.test(req.url)) {
    // something went wrong ... grab sent info
    body = JSON.parse(unescape(req.url.slice(2))).join(EOL);
    // send them to the stderr
    process.stderr.write(body);
    // new line for cleaner terminal output
    console.log(EOL);
    // in case there is an email notification
    // and it has not been nitified already
    if (EMAIL && !failures[UA]) {
      // flag the UA as already notified
      failures[UA] = true;
      // release the browser, do not exit now regardless
      emptyPage(response, false);
      // send the email with the error
      sendEmail(body);
      // sendEmail will eventually exit after
    } else {
      // no email to send, keep testing
      emptyPage(response, DONT_LOOP);
    }
  } else if(allgood.test(req.url)) {
    // eventually show which UA made it
    if (SHOW_SUCCESS) {
      console.log('[OK] ' + UA);
    }
    // tests are fixed now, or it was a flakey one
    // send a "green" email if necessary
    if (EMAIL && failures[UA]) {
      // clean current UA
      delete failures[UA];
      // release the browser, do not exit now
      emptyPage(response, false);
      // send the email with the achievement
      sendEmail('FIXED!');
    } else {
      // release the request and eventually exit
      emptyPage(response, DONT_LOOP);
    }
  } else if(external.test(req.url)) {
    body = decodeURIComponent(req.url.slice(10));
    if (externalURI.test(body)) {
      // requesting an external URL or library
      // TODO:  think about caching these requests on the server too
      //          - pros: less bandwidth used
      //          - cons: no updated content when/if necessary
      //          - how:  probably a <<* instead of <<< to force download?
      http
        .get(url.parse(body), onload)
        .on('error', onerror)
        .response = response
      ;
    } else {
      if (fs.existsSync(body)) {
        response.writeHead(200, js);
        response.end(fs.readFileSync(body, 'utf-8'));
      } else {
        process.stderr.write('unable to read ' + body);
        console.log(EOL);
      }
    }
  } else {
    // any other request will be proxied to the MIRROR port
    options.path = req.url;
    options.headers = req.headers;
    http.get(options, onload).on('error', onerror).response = response;
  }
}

// starts the server in the very first available PORT
// incrementally trying until it can start on the specified IP
(function startServer() {
  http.createServer(server).on('error', startServer).listen(PORT++, IP, function() {
    // show possible WiFi interfaces during startup
    var interfaces = os.networkInterfaces(),
        show = [];
    Object.keys(interfaces).forEach(
      function(key){
        interfaces[key].forEach(this, [key]);
      },
      function(obj){
        var networkwInterface = this[0];
        if (
          // not an internal interface
          !obj.internal &&
          // right now easier to reach through the network/url bar
          obj.family === 'IPv4' &&
          // either WiFi in Mac or Linux
          /^en[0-9]\d*|wlan\d+$/.test(networkwInterface)
        ) {
          // put this as possible reachable url for testing
          show.push(networkwInterface + ': http://' + obj.address + ':' + (PORT - 1) + '/$');
        }
      }
    );
    show.push('');
    // show what has been found
    process.stdout.write(show.join('\n'));
  });
}());

//server*/